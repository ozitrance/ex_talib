defmodule TestHelper do
  import ExTalib.{Constants, Definitions, Macros}

  @open_valid [64601.8, 64638.8, 64533.3, 64628.2, 64624.7, 64615.2, 64527.8, 64396.6,
  64172.7, 64168.3, 63987.5, 64013.0, 64081.1, 63815.4, 64015.1, 63973.8,
  63912.7, 64026.0, 63815.5, 63780.4, 63717.0, 63931.0, 64178.0, 64292.3,
  64279.5, 64235.4, 64222.2, 64382.6, 64204.4, 64407.1, 64357.5, 64349.0,
  64297.5, 64357.5, 64418.2, 64484.4, 64472.2, 64615.6, 64578.3, 64488.8,
  64441.9, 64375.0, 64462.6, 64440.2, 64554.4, 64462.7, 64546.1, 64618.2,
  64645.2, 64775.9, 64707.6, 64750.0, 64855.9, 64711.6, 64574.5, 6.47e4,
  64724.6, 64610.7, 64170.1, 64250.1, 63918.1, 63645.0, 62964.8, 62922.7,
  62892.6, 63035.8, 62888.0, 62720.0, 62890.0, 62646.1, 62676.1, 62296.8,
  63202.5, 63288.9, 63058.7, 62820.6, 62945.0, 63240.4, 63339.1, 63324.3,
  63403.0, 63512.0, 63556.6, 64219.8, 64744.6, 64710.0, 64786.7, 65064.3,
  64879.8, 65314.1]

  @high_valid [64790.0, 64747.8, 64824.4, 64675.9, 64801.9, 64620.1, 64531.2, 64430.1,
  64212.9, 64236.1, 64150.0, 64110.0, 64101.1, 64032.1, 64064.0, 64049.7,
  64036.4, 64026.2, 63915.4, 63826.5, 63952.6, 64178.0, 64320.9, 64330.4,
  64279.5, 64269.2, 64432.6, 6.44e4, 64412.8, 64468.6, 64393.6, 64413.3,
  64428.5, 64446.6, 64530.0, 6.45e4, 64681.9, 64628.0, 64591.7, 64509.5,
  64443.2, 64476.6, 64497.0, 64592.3, 64605.6, 64566.9, 64618.6, 64666.0,
  64785.0, 64890.0, 64872.7, 64869.7, 64927.2, 64717.7, 64713.3, 64867.0,
  64752.4, 64610.7, 64421.0, 64263.9, 63942.5, 63723.2, 63046.7, 63142.2,
  63086.5, 63188.0, 62987.0, 62970.6, 62909.0, 62743.3, 62754.4, 63244.0,
  63332.7, 63419.3, 63073.5, 62968.4, 63288.0, 63349.4, 63399.9, 63480.0,
  63560.0, 63581.9, 6.43e4, 64777.0, 64919.0, 64904.3, 65130.7, 65350.0,
  65394.7, 65650.0]

  @low_valid [64577.0, 6.44e4, 64522.2, 64320.0, 64483.0, 64369.8, 64083.0, 64111.5,
  63888.0, 63888.0, 63920.0, 63863.3, 6.38e4, 63722.0, 63876.0, 63862.0,
  63873.6, 63801.6, 63703.8, 6.36e4, 63559.5, 63899.3, 6.41e4, 64206.1,
  64163.0, 6.41e4, 64161.3, 64188.0, 64194.0, 64319.6, 64265.5, 64242.9,
  64280.1, 64339.4, 64399.0, 64386.3, 64446.0, 64547.3, 64482.4, 64435.1,
  64311.3, 64280.0, 64419.8, 64427.4, 64462.7, 64431.5, 64455.6, 64506.5,
  64605.1, 64678.8, 64693.9, 64716.7, 64651.4, 64545.8, 64430.9, 64620.9,
  64450.0, 64110.5, 64057.7, 63911.0, 63601.2, 62836.2, 62646.7, 62752.3,
  62691.0, 62857.4, 62718.8, 62650.0, 62532.3, 62488.8, 62272.0, 62271.2,
  6.29e4, 6.3e4, 6.28e4, 6.28e4, 62927.1, 6.31e4, 63226.7, 63274.9, 63350.0,
  63312.0, 63491.1, 64214.7, 64615.3, 64650.4, 64756.6, 64852.8, 64854.0,
  65213.9]

  @close_valid [64638.7, 64533.3, 64628.2, 64626.4, 64615.2, 64527.9, 64396.6, 64172.6,
  64168.3, 63987.5, 64013.0, 64081.0, 63815.5, 64015.1, 63973.9, 63912.8,
  64026.0, 63815.6, 63780.4, 63716.9, 63931.0, 64178.0, 64292.5, 64279.5,
  64235.3, 64222.3, 64382.6, 64204.5, 64407.2, 64357.5, 64349.1, 64297.4,
  64357.5, 64418.1, 64484.4, 64472.2, 64616.0, 64578.4, 64488.8, 64441.9,
  64375.0, 64462.5, 64440.2, 64554.6, 64462.7, 64546.0, 64618.2, 64645.3,
  64775.9, 64707.6, 64750.0, 64855.9, 64711.6, 64574.5, 6.47e4, 64724.7,
  64610.6, 64170.2, 64250.0, 63918.1, 63644.9, 62964.9, 62922.8, 62892.6,
  63035.8, 62888.0, 62720.0, 62890.1, 62646.1, 62676.1, 62296.2, 63202.4,
  63289.0, 63058.7, 62820.5, 62945.0, 63240.5, 63339.2, 63324.4, 63403.0,
  63512.0, 63556.6, 64219.8, 64744.5, 64710.0, 64786.6, 65064.3, 64879.7,
  65314.1, 65516.4]

  @volume_valid [2361.177, 4077.273, 1870.62, 3457.744, 2490.023, 2241.581, 6398.811,
  2146.546, 7264.395, 4749.065, 2769.492, 2513.08, 3837.793, 3877.616,
  1655.244, 1366.512, 1370.105, 1903.206, 3283.881, 5415.881, 5447.624,
  6529.069, 3434.473, 2313.172, 1503.657, 2456.866, 2316.318, 1675.588,
  2090.061, 1339.696, 1028.735, 1155.219, 1623.862, 768.403, 1526.34, 843.048,
  2225.363, 1089.093, 911.42, 1619.917, 2022.619, 1616.452, 678.034, 990.069,
  1292.898, 901.739, 1017.227, 1387.764, 2457.728, 4039.503, 1851.095,
  1288.222, 2042.398, 2184.226, 3410.129, 2563.37, 2941.15, 5809.598, 5793.129,
  6996.867, 12386.056, 24197.371, 15623.58, 7591.951, 6180.159, 4878.252,
  4736.259, 3425.112, 4748.179, 4218.099, 6739.662, 15903.124, 9980.728,
  4080.663, 4459.967, 2976.204, 2968.579, 1844.587, 1738.405, 2910.8, 2773.956,
  2355.299, 11356.72, 9434.533, 6052.43, 2822.991, 3436.74, 6614.774, 4488.253,
  5948.018]

  @periods_valid [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0,
  2.0, 2.0, 2.0]

  @close_valid_ints [64638, 64533, 64628, 64626, 64615, 64527, 64396, 64172, 64168, 63987,
  64013, 64081, 63815, 64015, 63973, 63912, 64026, 63815, 63780, 63716, 63931,
  64178, 64292, 64279, 64235, 64222, 64382, 64204, 64407, 64357, 64349, 64297,
  64357, 64418, 64484, 64472, 64616, 64578, 64488, 64441, 64375, 64462, 64440,
  64554, 64462, 64546, 64618, 64645, 64775, 64707, 64750, 64855, 64711, 64574,
  64700, 64724, 64610, 64170, 64250, 63918, 63644, 62964, 62922, 62892, 63035,
  62888, 62720, 62890, 62646, 62676, 62296, 63202, 63289, 63058, 62820, 62945,
  63240, 63339, 63324, 63403, 63512, 63556, 64219, 64744, 64710, 64786, 65064,
  64879, 65314, 65516]

  @close_valid_normalized [0.019721504720601194, 0.01968934679357681, 0.019718301132045635,
  0.01971775194543611, 0.01971433478431018, 0.019687699233748236,
  0.01964763912162013, 0.0195792958991015, 0.019577983953312086,
  0.01952282120942205, 0.01953060135305698, 0.01955134840275014,
  0.01947034337784525, 0.019531242070768094, 0.01951867179948342,
  0.019500029965126776, 0.019534567700792437, 0.019470373888212444,
  0.01945963423895952, 0.019440260155790177, 0.019505582851956416,
  0.019580943458930078, 0.019615877829369285, 0.01961191148163383,
  0.01959842589933328, 0.019594459551597825, 0.019643367670212714,
  0.01958902870623697, 0.019650873220542885, 0.019635709568046566,
  0.019633146697202116, 0.019617372837361882, 0.019635709568046566,
  0.01965419885056723, 0.019674427224018055, 0.019670704959220162,
  0.019714578867247746, 0.01970310696918212, 0.01967576968017467,
  0.019661460317959834, 0.019641048882305834, 0.01966774545360217,
  0.019660941641717503, 0.019695845501789516, 0.019667806474336563,
  0.019693221610210677, 0.019715250095326053, 0.019723518404836122,
  0.019763364944393853, 0.019742526363599112, 0.01975546275929014,
  0.019787773238150508, 0.019743746778286945, 0.019701917064861484,
  0.01974020757569223, 0.019747743636389595, 0.019712931307419173,
  0.019578563650288802, 0.019602910923311064, 0.019501647014588154,
  0.019418292691409187, 0.019210822194477648, 0.01919797732988821,
  0.01918876319899507, 0.01923245404481948, 0.019187359722104065,
  0.019136102305215095, 0.019188000439815178, 0.01911355514385739,
  0.019122708254016133, 0.01900679936903923, 0.019283284316567707,
  0.019309706294559283, 0.019239440918907322, 0.01916676522424689,
  0.01920475063140568, 0.01929490876646931, 0.01932502249889158,
  0.019320506964546603, 0.01934448811316251, 0.01937774441340595,
  0.019391352037175284, 0.019593696792417927, 0.01975378468909437,
  0.019743258612411812, 0.019766629553683805, 0.019851356843386587,
  0.01979503470554311, 0.01992757174064173, 0.019989294213478864]

  # @close_strings ["65328.9", "61483.7", "60684.6", "58144.5", "54003.1", "55991.2", "55102.9", "61659.8",
  # "60808.6", "60889.9", "58693.1", "59323.6", "60550.5", "58648.1", "57511.0", "58854.9",
  # "59468.5", "58390.0", "59398.5", "58982.9", "61120.0", "60349.9", "64019.9", "64116.5",
  # "64190.2", "62807.6", "59384.5", "59010.0", "59323.2", "59096.3", "58941.9"]

  @close_with_nans [64638.7, 64533.3, 64628.2, 64626.4, :nan, 64527.9, 64396.6, 64172.6,
  64168.3, 63987.5, 64013.0, 64081.0, 63815.5, 64015.1, 63973.9, 63912.8,
  64026.0, 63815.6, 63780.4, 63716.9, 63931.0, 64178.0, 64292.5, 64279.5,
  64235.3, 64222.3, :nan, 64204.5, 64407.2, 64357.5, 64349.1, 64297.4,
  64357.5, 64418.1, 64484.4, 64472.2, 64616.0, 64578.4, 64488.8, 64441.9,
  64375.0, 64462.5, 64440.2, 64554.6, 64462.7, 64546.0, 64618.2, 64645.3,
  64775.9, 64707.6, 64750.0, 64855.9, 64711.6, 64574.5, 6.47e4, 64724.7,
  64610.6, 64170.2, 64250.0, 63918.1, 63644.9, :nan, 62922.8, 62892.6,
  63035.8, 62888.0, 62720.0, 62890.1, 62646.1, 62676.1, 62296.2, 63202.4,
  63289.0, 63058.7, 62820.5, 62945.0, 63240.5, 63339.2, 63324.4, 63403.0,
  63512.0, 63556.6, 64219.8, 64744.5, 64710.0, 64786.6, 65064.3, 64879.7,
  65314.1, 65516.4]

  @close_with_nils [64638.7, 64533.3, 64628.2, 64626.4, nil, 64527.9, 64396.6, 64172.6,
  64168.3, 63987.5, 64013.0, 64081.0, 63815.5, 64015.1, 63973.9, 63912.8,
  64026.0, 63815.6, 63780.4, 63716.9, 63931.0, 64178.0, 64292.5, 64279.5,
  64235.3, 64222.3, nil, 64204.5, 64407.2, 64357.5, 64349.1, 64297.4,
  64357.5, 64418.1, 64484.4, 64472.2, 64616.0, 64578.4, 64488.8, 64441.9,
  64375.0, 64462.5, 64440.2, 64554.6, 64462.7, 64546.0, 64618.2, 64645.3,
  64775.9, 64707.6, 64750.0, 64855.9, 64711.6, 64574.5, 6.47e4, 64724.7,
  64610.6, 64170.2, 64250.0, 63918.1, 63644.9, nil, 62922.8, 62892.6,
  63035.8, 62888.0, 62720.0, 62890.1, 62646.1, 62676.1, 62296.2, 63202.4,
  63289.0, 63058.7, 62820.5, 62945.0, 63240.5, 63339.2, 63324.4, 63403.0,
  63512.0, 63556.6, 64219.8, 64744.5, 64710.0, 64786.6, 65064.3, 64879.7,
  65314.1, 65516.4]

  @close_empty []

  @bad_nx_shape [[65328.9, 61483.7, 60684.6, 58144.5, 54003.1, 55991.2, 55102.9, 61659.8],
                 [60808.6, 60889.9, 58693.1, 59323.6, 60550.5, 58648.1, 57511.0, 64019.9]]

  @bad_min_max -1

  @inputs %{
    :valid => %{
      :open => @open_valid,
      :high => @high_valid,
      :low => @low_valid,
      :close => @close_valid,
      :volume => @volume_valid,

      :values => @close_valid,
      :values_a => @open_valid,
      :values_b => @close_valid,
      :periods => @periods_valid,

    },
    :valid_normalized => %{
      :values => @close_valid_normalized
    },
    :bad_input_type_int_array => %{
      :values => @close_ints
    },
    :bad_input_type_string_array => %{
      :values => @close_strings
    },
    :with_nans => %{
      :values => @close_with_nans
    },
    :empty_list => %{
      :values => @close_empty
    },
    :nx_shape => %{
      :values => @bad_nx_shape
    },
    :bad_min_max => %{
      :values => @close_valid,
      :time_period => @bad_min_max
    },

  }

  @options %{
    :default => []
  }

  def build_test_inputs(func_name, test_type, input_type, dataframe \\ false) do
    values = @inputs[test_type]
    def = params()[func_name |> functions()]
    [_name | rest] = def
    [input_defs | _rest] = rest
    input_defs
      |> Enum.reverse
      |> Enum.reduce([@options[:default]], fn input, acc ->
        input_name = input |> elem(0)
        case Map.has_key?(values, input_name) do
          true ->
            if is_list(values[input_name]), do: [build_input(values[input_name], input_type, test_type) | acc], else: [values[input_name] | acc]
          false -> [input |> elem(3) | acc]
        end
      end)
      |> then(fn inputs ->
          case dataframe do
            true -> series_inputs_to_df(input_defs, inputs)
            false -> inputs
          end
        end)
  end

  defp build_input(inp, type, test_type) do
    case type do
      # :list -> inp
      :series -> Explorer.Series.from_list(nans_to_nils(inp))
      :tensor -> if Enum.member?([:valid, :valid_normalized], test_type), do: Nx.tensor(inp, type: :f64), else: Nx.tensor(inp)
      # :tensor -> Nx.tensor(inp)
    end
  end

  defp series_inputs_to_df(input_defs, inputs) do
    Enum.zip_reduce(input_defs ++ [nil], inputs, {Explorer.DataFrame.new([]), []}, fn def, input, {df, out} ->
      case is_series(input) do
        true ->
          {Explorer.DataFrame.put(df, elem(def, 0), input), [nil | out]}
        false -> {df, [input | out]}
      end
    end)
      |> then(fn {df, outputs} -> {df, Enum.reverse(outputs)} end)
      |> then(fn {df, final} ->
        [_first | rest] = final
        [df | rest]
      end)
  end

  def nans_to_nils(list), do: Enum.map(list, fn i -> if i === :nan, do: nil, else: i end)

end
ExUnit.start()
